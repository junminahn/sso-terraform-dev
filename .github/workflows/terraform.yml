name: "Terraform"

on: push
# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "terraform/**"
#       - ".github/**"
#   pull_request:
#     paths:
#       - "terraform/**"
#       - ".github/**"

env:
  TF_VERSION: 0.15.3
  DEV_KEYCLOAK_URL: http://localhost:8080
  TEST_KEYCLOAK_URL: http://localhost:8081
  PROD_KEYCLOAK_URL: http://localhost:8082
  KEYCLOAK_USERNAME: admin
  KEYCLOAK_PASSWORD: Pa55w0rd
  KEYCLOAK_CLIENT_ID: admin-cli

jobs:
  terraform:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2

      # NPM PACKAGES
      - uses: actions/cache@v2
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies in root
        run: yarn

      # ASDF TOOLS
      - name: Install asdf
        uses: asdf-vm/actions/setup@v1
      - name: Cache tools
        uses: actions/cache@v2
        with:
          path: |
            /home/runner/.asdf
          key: ${{ runner.os }}-${{ hashFiles('**/.tool-versions') }}
      - name: Install required tools
        run: |
          cat .tool-versions | cut -f 1 -d ' ' | xargs -n 1 asdf plugin-add || true
          asdf plugin-update --all
          asdf install
          asdf reshim

      # - uses: actions/download-artifact@v2
      #   with:
      #     name: keycloak-volumns
      #     path: /var/lib/docker/volumes

      # Keycloak
      - name: Run local Keycloak instance
        run: |
          docker-compose -f dockerfiles/keycloak-postgres-triple.yml up -d
          node_modules/.bin/wait-on $DEV_KEYCLOAK_URL --timeout 120000
          node_modules/.bin/wait-on $TEST_KEYCLOAK_URL --timeout 120000
          node_modules/.bin/wait-on $PROD_KEYCLOAK_URL --timeout 120000
          node scripts/e2e-prep.js

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Config Terraform plugin cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
          mkdir --parents ~/.terraform.d/plugin-cache
      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Variables
        run: |
          cat >"ci.auto.tfvars" <<EOF
          dev_client_id="${{ env.KEYCLOAK_CLIENT_ID }}"
          dev_username="${{ env.KEYCLOAK_USERNAME }}"
          dev_password="${{ env.KEYCLOAK_PASSWORD }}"
          dev_keycloak_url="${{ env.DEV_KEYCLOAK_URL }}"
          test_client_id="${{ env.KEYCLOAK_CLIENT_ID }}"
          test_username="${{ env.KEYCLOAK_USERNAME }}"
          test_password="${{ env.KEYCLOAK_PASSWORD }}"
          test_keycloak_url="${{ env.TEST_KEYCLOAK_URL }}"
          prod_client_id="${{ env.KEYCLOAK_CLIENT_ID }}"
          prod_username="${{ env.KEYCLOAK_USERNAME }}"
          prod_password="${{ env.KEYCLOAK_PASSWORD }}"
          prod_keycloak_url="${{ env.PROD_KEYCLOAK_URL }}"
          EOF
        working-directory: ./terraform

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: ./terraform
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./terraform

      - uses: actions/upload-artifact@v2
        with:
          name: keycloak-volumns
          path: /var/lib/docker/volumes
